/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: crypto-sdk/lib/cryptosdk.swigcxx

package cryptosdk

/*
#define intgo swig_intgo
typedef void *swig_voidp;

#include <stdint.h>


typedef long long intgo;
typedef unsigned long long uintgo;



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;


typedef long long swig_type_1;
typedef long long swig_type_2;
typedef long long swig_type_3;
typedef long long swig_type_4;
typedef _gostring_ swig_type_5;
typedef _gostring_ swig_type_6;
typedef _gostring_ swig_type_7;
typedef long long swig_type_8;
typedef long long swig_type_9;
typedef long long swig_type_10;
typedef long long swig_type_11;
typedef _gostring_ swig_type_12;
typedef _gostring_ swig_type_13;
typedef _gostring_ swig_type_14;
typedef _gostring_ swig_type_15;
typedef _gostring_ swig_type_16;
typedef _gostring_ swig_type_17;
typedef _gostring_ swig_type_18;
typedef _gostring_ swig_type_19;
typedef _gostring_ swig_type_20;
typedef _gostring_ swig_type_21;
typedef _gostring_ swig_type_22;
typedef _gostring_ swig_type_23;
typedef _gostring_ swig_type_24;
typedef _gostring_ swig_type_25;
typedef _gostring_ swig_type_26;
typedef _gostring_ swig_type_27;
typedef _gostring_ swig_type_28;
typedef _gostring_ swig_type_29;
typedef _gostring_ swig_type_30;
typedef _gostring_ swig_type_31;
extern void _wrap_Swig_free_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1);
extern uintptr_t _wrap_Swig_malloc_cryptosdk_8fd4b13a305ceb16(swig_intgo arg1);
extern uintptr_t _wrap_new_StringVector__SWIG_0_cryptosdk_8fd4b13a305ceb16(void);
extern uintptr_t _wrap_new_StringVector__SWIG_1_cryptosdk_8fd4b13a305ceb16(swig_type_1 arg1);
extern swig_type_2 _wrap_StringVector_size_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1);
extern swig_type_3 _wrap_StringVector_capacity_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1);
extern void _wrap_StringVector_reserve_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1, swig_type_4 arg2);
extern _Bool _wrap_StringVector_isEmpty_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1);
extern void _wrap_StringVector_clear_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1);
extern void _wrap_StringVector_add_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1, swig_type_5 arg2);
extern swig_type_6 _wrap_StringVector_get_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1, swig_intgo arg2);
extern void _wrap_StringVector_set_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1, swig_intgo arg2, swig_type_7 arg3);
extern void _wrap_delete_StringVector_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1);
extern uintptr_t _wrap_new_ByteVector__SWIG_0_cryptosdk_8fd4b13a305ceb16(void);
extern uintptr_t _wrap_new_ByteVector__SWIG_1_cryptosdk_8fd4b13a305ceb16(swig_type_8 arg1);
extern swig_type_9 _wrap_ByteVector_size_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1);
extern swig_type_10 _wrap_ByteVector_capacity_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1);
extern void _wrap_ByteVector_reserve_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1, swig_type_11 arg2);
extern _Bool _wrap_ByteVector_isEmpty_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1);
extern void _wrap_ByteVector_clear_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1);
extern void _wrap_ByteVector_add_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1, char arg2);
extern char _wrap_ByteVector_get_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1, swig_intgo arg2);
extern void _wrap_ByteVector_set_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1, swig_intgo arg2, char arg3);
extern void _wrap_delete_ByteVector_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1);
extern swig_type_12 _wrap_Utils_Vec2Hex_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1);
extern uintptr_t _wrap_Utils_Hex2Vec_cryptosdk_8fd4b13a305ceb16(swig_type_13 arg1);
extern uintptr_t _wrap_new_Utils_cryptosdk_8fd4b13a305ceb16(void);
extern void _wrap_delete_Utils_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1);
extern void _wrap_CryptoSDK_Init_cryptosdk_8fd4b13a305ceb16(void);
extern _Bool _wrap_CryptoSDK_IsInitialized_cryptosdk_8fd4b13a305ceb16(void);
extern uintptr_t _wrap_new_CryptoSDK_cryptosdk_8fd4b13a305ceb16(void);
extern void _wrap_delete_CryptoSDK_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1);
extern void _wrap_SHA256_Hash__SWIG_0_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1, uintptr_t arg2);
extern void _wrap_SHA256_Hash__SWIG_1_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1, swig_voidp arg2);
extern void _wrap_SHA256_Hash__SWIG_2_cryptosdk_8fd4b13a305ceb16(swig_type_14 arg1, uintptr_t arg2);
extern void _wrap_SHA256_Hash__SWIG_3_cryptosdk_8fd4b13a305ceb16(swig_type_15 arg1, swig_voidp arg2);
extern uintptr_t _wrap_new_SHA256_cryptosdk_8fd4b13a305ceb16(void);
extern void _wrap_delete_SHA256_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1);
extern void _wrap_SHA512_Hash__SWIG_0_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1, uintptr_t arg2);
extern void _wrap_SHA512_Hash__SWIG_1_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1, swig_voidp arg2);
extern void _wrap_SHA512_Hash__SWIG_2_cryptosdk_8fd4b13a305ceb16(swig_type_16 arg1, uintptr_t arg2);
extern void _wrap_SHA512_Hash__SWIG_3_cryptosdk_8fd4b13a305ceb16(swig_type_17 arg1, swig_voidp arg2);
extern uintptr_t _wrap_new_SHA512_cryptosdk_8fd4b13a305ceb16(void);
extern void _wrap_delete_SHA512_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1);
extern uintptr_t _wrap_ED25519Key_PUBLIC_KEY_SIZE_get_cryptosdk_8fd4b13a305ceb16(void);
extern uintptr_t _wrap_ED25519Key_PRIVATE_KEY_SIZE_get_cryptosdk_8fd4b13a305ceb16(void);
extern uintptr_t _wrap_ED25519Key_SIGNATURE_SIZE_get_cryptosdk_8fd4b13a305ceb16(void);
extern uintptr_t _wrap_new_ED25519Key__SWIG_0_cryptosdk_8fd4b13a305ceb16(void);
extern uintptr_t _wrap_new_ED25519Key__SWIG_1_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1);
extern uintptr_t _wrap_new_ED25519Key__SWIG_2_cryptosdk_8fd4b13a305ceb16(swig_type_18 arg1);
extern uintptr_t _wrap_new_ED25519Key__SWIG_3_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1, uintptr_t arg2);
extern uintptr_t _wrap_new_ED25519Key__SWIG_4_cryptosdk_8fd4b13a305ceb16(swig_type_19 arg1, swig_type_20 arg2);
extern void _wrap_delete_ED25519Key_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1);
extern uintptr_t _wrap_ED25519Key_GetPublicKey_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1);
extern uintptr_t _wrap_ED25519Key_GetPrivateKeyUnsafe_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1);
extern _Bool _wrap_ED25519Key_HasPrivateKey_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1);
extern uintptr_t _wrap_ED25519Key_Sign_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1, uintptr_t arg2);
extern _Bool _wrap_ED25519Key_Verify_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3);
extern void _wrap_RIPEMD160_Hash__SWIG_0_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1, uintptr_t arg2);
extern void _wrap_RIPEMD160_Hash__SWIG_1_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1, swig_voidp arg2);
extern void _wrap_RIPEMD160_Hash__SWIG_2_cryptosdk_8fd4b13a305ceb16(swig_type_21 arg1, uintptr_t arg2);
extern void _wrap_RIPEMD160_Hash__SWIG_3_cryptosdk_8fd4b13a305ceb16(swig_type_22 arg1, swig_voidp arg2);
extern uintptr_t _wrap_new_RIPEMD160_cryptosdk_8fd4b13a305ceb16(void);
extern void _wrap_delete_RIPEMD160_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1);
extern swig_type_23 _wrap_Base58_Encode_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1);
extern uintptr_t _wrap_Base58_Decode_cryptosdk_8fd4b13a305ceb16(swig_type_24 arg1);
extern uintptr_t _wrap_new_Base58_cryptosdk_8fd4b13a305ceb16(void);
extern void _wrap_delete_Base58_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1);
extern void _wrap_CRC32_Hash__SWIG_0_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1, uintptr_t arg2);
extern void _wrap_CRC32_Hash__SWIG_1_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1, swig_voidp arg2);
extern void _wrap_CRC32_Hash__SWIG_2_cryptosdk_8fd4b13a305ceb16(swig_type_25 arg1, uintptr_t arg2);
extern void _wrap_CRC32_Hash__SWIG_3_cryptosdk_8fd4b13a305ceb16(swig_type_26 arg1, swig_voidp arg2);
extern uintptr_t _wrap_new_CRC32_cryptosdk_8fd4b13a305ceb16(void);
extern void _wrap_delete_CRC32_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1);
extern uintptr_t _wrap_Address_MAIN_NETWORK_ID_get_cryptosdk_8fd4b13a305ceb16(void);
extern uintptr_t _wrap_Address_TEST_NETWORK_ID_get_cryptosdk_8fd4b13a305ceb16(void);
extern uintptr_t _wrap_Address_VERSION_get_cryptosdk_8fd4b13a305ceb16(void);
extern uintptr_t _wrap_Address_PUBLIC_KEY_SIZE_get_cryptosdk_8fd4b13a305ceb16(void);
extern uintptr_t _wrap_Address_NETWORK_ID_SIZE_get_cryptosdk_8fd4b13a305ceb16(void);
extern uintptr_t _wrap_Address_VERSION_SIZE_get_cryptosdk_8fd4b13a305ceb16(void);
extern uintptr_t _wrap_Address_VIRTUAL_CHAIN_ID_SIZE_get_cryptosdk_8fd4b13a305ceb16(void);
extern uintptr_t _wrap_Address_VIRTUAL_CHAIN_ID_MSB_get_cryptosdk_8fd4b13a305ceb16(void);
extern uintptr_t _wrap_Address_ACCOUNT_ID_SIZE_get_cryptosdk_8fd4b13a305ceb16(void);
extern uintptr_t _wrap_Address_CHECKSUM_SIZE_get_cryptosdk_8fd4b13a305ceb16(void);
extern uintptr_t _wrap_Address_ADDRESS_LENGTH_get_cryptosdk_8fd4b13a305ceb16(void);
extern uintptr_t _wrap_new_Address__SWIG_0_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3);
extern uintptr_t _wrap_new_Address__SWIG_1_cryptosdk_8fd4b13a305ceb16(swig_type_27 arg1, swig_type_28 arg2, swig_type_29 arg3);
extern uintptr_t _wrap_new_Address__SWIG_2_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1, uintptr_t arg2, uintptr_t arg3);
extern void _wrap_delete_Address_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1);
extern uintptr_t _wrap_Address_GetPublicKey_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1);
extern uintptr_t _wrap_Address_GetNetworkId_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1);
extern uintptr_t _wrap_Address_GetVersion_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1);
extern uintptr_t _wrap_Address_GetVirtualChainId_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1);
extern uintptr_t _wrap_Address_GetAccountId_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1);
extern uintptr_t _wrap_Address_GetChecksum_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1);
extern swig_type_30 _wrap_Address_ToString_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1);
extern _Bool _wrap_Address_IsValidNetworkId_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1);
extern _Bool _wrap_Address_IsValidVersion_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1);
extern _Bool _wrap_Address_IsValidVirtualChainId_cryptosdk_8fd4b13a305ceb16(uintptr_t arg1);
extern _Bool _wrap_Address_IsValid_cryptosdk_8fd4b13a305ceb16(swig_type_31 arg1);
#undef intgo
*/
import "C"

import "unsafe"
import _ "runtime/cgo"
import "sync"


type _ unsafe.Pointer



var Swig_escape_always_false bool
var Swig_escape_val interface{}


type _swig_fnptr *byte
type _swig_memberptr *byte


type _ sync.Mutex


type swig_gostring struct { p uintptr; n int }
func swigCopyString(s string) string {
  p := *(*swig_gostring)(unsafe.Pointer(&s))
  r := string((*[0x7fffffff]byte)(unsafe.Pointer(p.p))[:p.n])
  Swig_free(p.p)
  return r
}

func Swig_free(arg1 uintptr) {
	_swig_i_0 := arg1
	C._wrap_Swig_free_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0))
}

func Swig_malloc(arg1 int) (_swig_ret uintptr) {
	var swig_r uintptr
	_swig_i_0 := arg1
	swig_r = (uintptr)(C._wrap_Swig_malloc_cryptosdk_8fd4b13a305ceb16(C.swig_intgo(_swig_i_0)))
	return swig_r
}

type SwigcptrStringVector uintptr

func (p SwigcptrStringVector) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrStringVector) SwigIsStringVector() {
}

func NewStringVector__SWIG_0() (_swig_ret StringVector) {
	var swig_r StringVector
	swig_r = (StringVector)(SwigcptrStringVector(C._wrap_new_StringVector__SWIG_0_cryptosdk_8fd4b13a305ceb16()))
	return swig_r
}

func NewStringVector__SWIG_1(arg1 int64) (_swig_ret StringVector) {
	var swig_r StringVector
	_swig_i_0 := arg1
	swig_r = (StringVector)(SwigcptrStringVector(C._wrap_new_StringVector__SWIG_1_cryptosdk_8fd4b13a305ceb16(C.swig_type_1(_swig_i_0))))
	return swig_r
}

func NewStringVector(a ...interface{}) StringVector {
	argc := len(a)
	if argc == 0 {
		return NewStringVector__SWIG_0()
	}
	if argc == 1 {
		return NewStringVector__SWIG_1(a[0].(int64))
	}
	panic("No match for overloaded function call")
}

func (arg1 SwigcptrStringVector) Size() (_swig_ret int64) {
	var swig_r int64
	_swig_i_0 := arg1
	swig_r = (int64)(C._wrap_StringVector_size_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrStringVector) Capacity() (_swig_ret int64) {
	var swig_r int64
	_swig_i_0 := arg1
	swig_r = (int64)(C._wrap_StringVector_capacity_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrStringVector) Reserve(arg2 int64) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_StringVector_reserve_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0), C.swig_type_4(_swig_i_1))
}

func (arg1 SwigcptrStringVector) IsEmpty() (_swig_ret bool) {
	var swig_r bool
	_swig_i_0 := arg1
	swig_r = (bool)(C._wrap_StringVector_isEmpty_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrStringVector) Clear() {
	_swig_i_0 := arg1
	C._wrap_StringVector_clear_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0))
}

func (arg1 SwigcptrStringVector) Add(arg2 string) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_StringVector_add_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0), *(*C.swig_type_5)(unsafe.Pointer(&_swig_i_1)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
}

func (arg1 SwigcptrStringVector) Get(arg2 int) (_swig_ret string) {
	var swig_r string
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r_p := C._wrap_StringVector_get_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1))
	swig_r = *(*string)(unsafe.Pointer(&swig_r_p))
	var swig_r_1 string
 swig_r_1 = swigCopyString(swig_r) 
	return swig_r_1
}

func (arg1 SwigcptrStringVector) Set(arg2 int, arg3 string) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	C._wrap_StringVector_set_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1), *(*C.swig_type_7)(unsafe.Pointer(&_swig_i_2)))
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
}

func DeleteStringVector(arg1 StringVector) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_delete_StringVector_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0))
}

type StringVector interface {
	Swigcptr() uintptr
	SwigIsStringVector()
	Size() (_swig_ret int64)
	Capacity() (_swig_ret int64)
	Reserve(arg2 int64)
	IsEmpty() (_swig_ret bool)
	Clear()
	Add(arg2 string)
	Get(arg2 int) (_swig_ret string)
	Set(arg2 int, arg3 string)
}

type SwigcptrByteVector uintptr

func (p SwigcptrByteVector) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrByteVector) SwigIsByteVector() {
}

func NewByteVector__SWIG_0() (_swig_ret ByteVector) {
	var swig_r ByteVector
	swig_r = (ByteVector)(SwigcptrByteVector(C._wrap_new_ByteVector__SWIG_0_cryptosdk_8fd4b13a305ceb16()))
	return swig_r
}

func NewByteVector__SWIG_1(arg1 int64) (_swig_ret ByteVector) {
	var swig_r ByteVector
	_swig_i_0 := arg1
	swig_r = (ByteVector)(SwigcptrByteVector(C._wrap_new_ByteVector__SWIG_1_cryptosdk_8fd4b13a305ceb16(C.swig_type_8(_swig_i_0))))
	return swig_r
}

func NewByteVector(a ...interface{}) ByteVector {
	argc := len(a)
	if argc == 0 {
		return NewByteVector__SWIG_0()
	}
	if argc == 1 {
		return NewByteVector__SWIG_1(a[0].(int64))
	}
	panic("No match for overloaded function call")
}

func (arg1 SwigcptrByteVector) Size() (_swig_ret int64) {
	var swig_r int64
	_swig_i_0 := arg1
	swig_r = (int64)(C._wrap_ByteVector_size_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrByteVector) Capacity() (_swig_ret int64) {
	var swig_r int64
	_swig_i_0 := arg1
	swig_r = (int64)(C._wrap_ByteVector_capacity_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrByteVector) Reserve(arg2 int64) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_ByteVector_reserve_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0), C.swig_type_11(_swig_i_1))
}

func (arg1 SwigcptrByteVector) IsEmpty() (_swig_ret bool) {
	var swig_r bool
	_swig_i_0 := arg1
	swig_r = (bool)(C._wrap_ByteVector_isEmpty_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrByteVector) Clear() {
	_swig_i_0 := arg1
	C._wrap_ByteVector_clear_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0))
}

func (arg1 SwigcptrByteVector) Add(arg2 byte) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_ByteVector_add_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0), C.char(_swig_i_1))
}

func (arg1 SwigcptrByteVector) Get(arg2 int) (_swig_ret byte) {
	var swig_r byte
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (byte)(C._wrap_ByteVector_get_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1)))
	return swig_r
}

func (arg1 SwigcptrByteVector) Set(arg2 int, arg3 byte) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	C._wrap_ByteVector_set_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0), C.swig_intgo(_swig_i_1), C.char(_swig_i_2))
}

func DeleteByteVector(arg1 ByteVector) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_delete_ByteVector_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0))
}

type ByteVector interface {
	Swigcptr() uintptr
	SwigIsByteVector()
	Size() (_swig_ret int64)
	Capacity() (_swig_ret int64)
	Reserve(arg2 int64)
	IsEmpty() (_swig_ret bool)
	Clear()
	Add(arg2 byte)
	Get(arg2 int) (_swig_ret byte)
	Set(arg2 int, arg3 byte)
}

type SwigcptrUtils uintptr

func (p SwigcptrUtils) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrUtils) SwigIsUtils() {
}

func UtilsVec2Hex(arg1 Std_vector_Sl_uint8_t_Sg_) (_swig_ret string) {
	var swig_r string
	_swig_i_0 := arg1.Swigcptr()
	swig_r_p := C._wrap_Utils_Vec2Hex_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0))
	swig_r = *(*string)(unsafe.Pointer(&swig_r_p))
	var swig_r_1 string
 swig_r_1 = swigCopyString(swig_r) 
	return swig_r_1
}

func UtilsHex2Vec(arg1 string) (_swig_ret Std_vector_Sl_uint8_t_Sg_) {
	var swig_r Std_vector_Sl_uint8_t_Sg_
	_swig_i_0 := arg1
	swig_r = (Std_vector_Sl_uint8_t_Sg_)(SwigcptrStd_vector_Sl_uint8_t_Sg_(C._wrap_Utils_Hex2Vec_cryptosdk_8fd4b13a305ceb16(*(*C.swig_type_13)(unsafe.Pointer(&_swig_i_0)))))
	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
	return swig_r
}

func NewUtils() (_swig_ret Utils) {
	var swig_r Utils
	swig_r = (Utils)(SwigcptrUtils(C._wrap_new_Utils_cryptosdk_8fd4b13a305ceb16()))
	return swig_r
}

func DeleteUtils(arg1 Utils) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_delete_Utils_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0))
}

type Utils interface {
	Swigcptr() uintptr
	SwigIsUtils()
}

type SwigcptrCryptoSDK uintptr

func (p SwigcptrCryptoSDK) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrCryptoSDK) SwigIsCryptoSDK() {
}

func CryptoSDKInit() {
	C._wrap_CryptoSDK_Init_cryptosdk_8fd4b13a305ceb16()
}

func CryptoSDKIsInitialized() (_swig_ret bool) {
	var swig_r bool
	swig_r = (bool)(C._wrap_CryptoSDK_IsInitialized_cryptosdk_8fd4b13a305ceb16())
	return swig_r
}

func NewCryptoSDK() (_swig_ret CryptoSDK) {
	var swig_r CryptoSDK
	swig_r = (CryptoSDK)(SwigcptrCryptoSDK(C._wrap_new_CryptoSDK_cryptosdk_8fd4b13a305ceb16()))
	return swig_r
}

func DeleteCryptoSDK(arg1 CryptoSDK) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_delete_CryptoSDK_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0))
}

type CryptoSDK interface {
	Swigcptr() uintptr
	SwigIsCryptoSDK()
}

type SwigcptrSHA256 uintptr

func (p SwigcptrSHA256) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrSHA256) SwigIsSHA256() {
}

func SHA256Hash__SWIG_0(arg1 Std_vector_Sl_uint8_t_Sg_, arg2 Std_vector_Sl_uint8_t_Sg_) {
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2.Swigcptr()
	C._wrap_SHA256_Hash__SWIG_0_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1))
}

func SHA256Hash__SWIG_1(arg1 Std_vector_Sl_uint8_t_Sg_, arg2 *string) {
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2
	C._wrap_SHA256_Hash__SWIG_1_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0), C.swig_voidp(_swig_i_1))
}

func SHA256Hash__SWIG_2(arg1 string, arg2 Std_vector_Sl_uint8_t_Sg_) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	C._wrap_SHA256_Hash__SWIG_2_cryptosdk_8fd4b13a305ceb16(*(*C.swig_type_14)(unsafe.Pointer(&_swig_i_0)), C.uintptr_t(_swig_i_1))
	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
}

func SHA256Hash__SWIG_3(arg1 string, arg2 *string) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_SHA256_Hash__SWIG_3_cryptosdk_8fd4b13a305ceb16(*(*C.swig_type_15)(unsafe.Pointer(&_swig_i_0)), C.swig_voidp(_swig_i_1))
	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
}

func SHA256Hash(a ...interface{}) {
	argc := len(a)
	if argc == 2 {
		if _, ok := a[0].(SwigcptrStd_vector_Sl_uint8_t_Sg_); !ok {
			goto check_1
		}
		if _, ok := a[1].(SwigcptrStd_vector_Sl_uint8_t_Sg_); !ok {
			goto check_1
		}
		SHA256Hash__SWIG_0(a[0].(Std_vector_Sl_uint8_t_Sg_), a[1].(Std_vector_Sl_uint8_t_Sg_))
		return
	}
check_1:
	if argc == 2 {
		if _, ok := a[0].(SwigcptrStd_vector_Sl_uint8_t_Sg_); !ok {
			goto check_2
		}
		if _, ok := a[1].(*string); !ok {
			goto check_2
		}
		SHA256Hash__SWIG_1(a[0].(Std_vector_Sl_uint8_t_Sg_), a[1].(*string))
		return
	}
check_2:
	if argc == 2 {
		if _, ok := a[1].(SwigcptrStd_vector_Sl_uint8_t_Sg_); !ok {
			goto check_3
		}
		SHA256Hash__SWIG_2(a[0].(string), a[1].(Std_vector_Sl_uint8_t_Sg_))
		return
	}
check_3:
	if argc == 2 {
		SHA256Hash__SWIG_3(a[0].(string), a[1].(*string))
		return
	}
	panic("No match for overloaded function call")
}

func NewSHA256() (_swig_ret SHA256) {
	var swig_r SHA256
	swig_r = (SHA256)(SwigcptrSHA256(C._wrap_new_SHA256_cryptosdk_8fd4b13a305ceb16()))
	return swig_r
}

func DeleteSHA256(arg1 SHA256) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_delete_SHA256_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0))
}

type SHA256 interface {
	Swigcptr() uintptr
	SwigIsSHA256()
}

type SwigcptrSHA512 uintptr

func (p SwigcptrSHA512) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrSHA512) SwigIsSHA512() {
}

func SHA512Hash__SWIG_0(arg1 Std_vector_Sl_uint8_t_Sg_, arg2 Std_vector_Sl_uint8_t_Sg_) {
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2.Swigcptr()
	C._wrap_SHA512_Hash__SWIG_0_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1))
}

func SHA512Hash__SWIG_1(arg1 Std_vector_Sl_uint8_t_Sg_, arg2 *string) {
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2
	C._wrap_SHA512_Hash__SWIG_1_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0), C.swig_voidp(_swig_i_1))
}

func SHA512Hash__SWIG_2(arg1 string, arg2 Std_vector_Sl_uint8_t_Sg_) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	C._wrap_SHA512_Hash__SWIG_2_cryptosdk_8fd4b13a305ceb16(*(*C.swig_type_16)(unsafe.Pointer(&_swig_i_0)), C.uintptr_t(_swig_i_1))
	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
}

func SHA512Hash__SWIG_3(arg1 string, arg2 *string) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_SHA512_Hash__SWIG_3_cryptosdk_8fd4b13a305ceb16(*(*C.swig_type_17)(unsafe.Pointer(&_swig_i_0)), C.swig_voidp(_swig_i_1))
	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
}

func SHA512Hash(a ...interface{}) {
	argc := len(a)
	if argc == 2 {
		if _, ok := a[0].(SwigcptrStd_vector_Sl_uint8_t_Sg_); !ok {
			goto check_1
		}
		if _, ok := a[1].(SwigcptrStd_vector_Sl_uint8_t_Sg_); !ok {
			goto check_1
		}
		SHA512Hash__SWIG_0(a[0].(Std_vector_Sl_uint8_t_Sg_), a[1].(Std_vector_Sl_uint8_t_Sg_))
		return
	}
check_1:
	if argc == 2 {
		if _, ok := a[0].(SwigcptrStd_vector_Sl_uint8_t_Sg_); !ok {
			goto check_2
		}
		if _, ok := a[1].(*string); !ok {
			goto check_2
		}
		SHA512Hash__SWIG_1(a[0].(Std_vector_Sl_uint8_t_Sg_), a[1].(*string))
		return
	}
check_2:
	if argc == 2 {
		if _, ok := a[1].(SwigcptrStd_vector_Sl_uint8_t_Sg_); !ok {
			goto check_3
		}
		SHA512Hash__SWIG_2(a[0].(string), a[1].(Std_vector_Sl_uint8_t_Sg_))
		return
	}
check_3:
	if argc == 2 {
		SHA512Hash__SWIG_3(a[0].(string), a[1].(*string))
		return
	}
	panic("No match for overloaded function call")
}

func NewSHA512() (_swig_ret SHA512) {
	var swig_r SHA512
	swig_r = (SHA512)(SwigcptrSHA512(C._wrap_new_SHA512_cryptosdk_8fd4b13a305ceb16()))
	return swig_r
}

func DeleteSHA512(arg1 SHA512) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_delete_SHA512_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0))
}

type SHA512 interface {
	Swigcptr() uintptr
	SwigIsSHA512()
}

type SwigcptrED25519Key uintptr

func (p SwigcptrED25519Key) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrED25519Key) SwigIsED25519Key() {
}

func GetED25519KeyPUBLIC_KEY_SIZE() (_swig_ret Uint8_t) {
	var swig_r Uint8_t
	swig_r = (Uint8_t)(SwigcptrUint8_t(C._wrap_ED25519Key_PUBLIC_KEY_SIZE_get_cryptosdk_8fd4b13a305ceb16()))
	return swig_r
}

func GetED25519KeyPRIVATE_KEY_SIZE() (_swig_ret Uint8_t) {
	var swig_r Uint8_t
	swig_r = (Uint8_t)(SwigcptrUint8_t(C._wrap_ED25519Key_PRIVATE_KEY_SIZE_get_cryptosdk_8fd4b13a305ceb16()))
	return swig_r
}

func GetED25519KeySIGNATURE_SIZE() (_swig_ret Uint8_t) {
	var swig_r Uint8_t
	swig_r = (Uint8_t)(SwigcptrUint8_t(C._wrap_ED25519Key_SIGNATURE_SIZE_get_cryptosdk_8fd4b13a305ceb16()))
	return swig_r
}

func NewED25519Key__SWIG_0() (_swig_ret ED25519Key) {
	var swig_r ED25519Key
	swig_r = (ED25519Key)(SwigcptrED25519Key(C._wrap_new_ED25519Key__SWIG_0_cryptosdk_8fd4b13a305ceb16()))
	return swig_r
}

func NewED25519Key__SWIG_1(arg1 Std_vector_Sl_uint8_t_Sg_) (_swig_ret ED25519Key) {
	var swig_r ED25519Key
	_swig_i_0 := arg1.Swigcptr()
	swig_r = (ED25519Key)(SwigcptrED25519Key(C._wrap_new_ED25519Key__SWIG_1_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0))))
	return swig_r
}

func NewED25519Key__SWIG_2(arg1 string) (_swig_ret ED25519Key) {
	var swig_r ED25519Key
	_swig_i_0 := arg1
	swig_r = (ED25519Key)(SwigcptrED25519Key(C._wrap_new_ED25519Key__SWIG_2_cryptosdk_8fd4b13a305ceb16(*(*C.swig_type_18)(unsafe.Pointer(&_swig_i_0)))))
	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
	return swig_r
}

func NewED25519Key__SWIG_3(arg1 Std_vector_Sl_uint8_t_Sg_, arg2 Std_vector_Sl_uint8_t_Sg_) (_swig_ret ED25519Key) {
	var swig_r ED25519Key
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2.Swigcptr()
	swig_r = (ED25519Key)(SwigcptrED25519Key(C._wrap_new_ED25519Key__SWIG_3_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1))))
	return swig_r
}

func NewED25519Key__SWIG_4(arg1 string, arg2 string) (_swig_ret ED25519Key) {
	var swig_r ED25519Key
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r = (ED25519Key)(SwigcptrED25519Key(C._wrap_new_ED25519Key__SWIG_4_cryptosdk_8fd4b13a305ceb16(*(*C.swig_type_19)(unsafe.Pointer(&_swig_i_0)), *(*C.swig_type_20)(unsafe.Pointer(&_swig_i_1)))))
	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func NewED25519Key(a ...interface{}) ED25519Key {
	argc := len(a)
	if argc == 0 {
		return NewED25519Key__SWIG_0()
	}
	if argc == 1 {
		if _, ok := a[0].(SwigcptrStd_vector_Sl_uint8_t_Sg_); !ok {
			goto check_2
		}
		return NewED25519Key__SWIG_1(a[0].(Std_vector_Sl_uint8_t_Sg_))
	}
check_2:
	if argc == 1 {
		return NewED25519Key__SWIG_2(a[0].(string))
	}
	if argc == 2 {
		if _, ok := a[0].(SwigcptrStd_vector_Sl_uint8_t_Sg_); !ok {
			goto check_4
		}
		if _, ok := a[1].(SwigcptrStd_vector_Sl_uint8_t_Sg_); !ok {
			goto check_4
		}
		return NewED25519Key__SWIG_3(a[0].(Std_vector_Sl_uint8_t_Sg_), a[1].(Std_vector_Sl_uint8_t_Sg_))
	}
check_4:
	if argc == 2 {
		return NewED25519Key__SWIG_4(a[0].(string), a[1].(string))
	}
	panic("No match for overloaded function call")
}

func DeleteED25519Key(arg1 ED25519Key) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_delete_ED25519Key_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0))
}

func (arg1 SwigcptrED25519Key) GetPublicKey() (_swig_ret Std_vector_Sl_uint8_t_Sg_) {
	var swig_r Std_vector_Sl_uint8_t_Sg_
	_swig_i_0 := arg1
	swig_r = (Std_vector_Sl_uint8_t_Sg_)(SwigcptrStd_vector_Sl_uint8_t_Sg_(C._wrap_ED25519Key_GetPublicKey_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0))))
	return swig_r
}

func (arg1 SwigcptrED25519Key) GetPrivateKeyUnsafe() (_swig_ret Std_vector_Sl_uint8_t_Sg_) {
	var swig_r Std_vector_Sl_uint8_t_Sg_
	_swig_i_0 := arg1
	swig_r = (Std_vector_Sl_uint8_t_Sg_)(SwigcptrStd_vector_Sl_uint8_t_Sg_(C._wrap_ED25519Key_GetPrivateKeyUnsafe_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0))))
	return swig_r
}

func (arg1 SwigcptrED25519Key) HasPrivateKey() (_swig_ret bool) {
	var swig_r bool
	_swig_i_0 := arg1
	swig_r = (bool)(C._wrap_ED25519Key_HasPrivateKey_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrED25519Key) Sign(arg2 Std_vector_Sl_uint8_t_Sg_) (_swig_ret Std_vector_Sl_uint8_t_Sg_) {
	var swig_r Std_vector_Sl_uint8_t_Sg_
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	swig_r = (Std_vector_Sl_uint8_t_Sg_)(SwigcptrStd_vector_Sl_uint8_t_Sg_(C._wrap_ED25519Key_Sign_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1))))
	return swig_r
}

func (arg1 SwigcptrED25519Key) Verify(arg2 Std_vector_Sl_uint8_t_Sg_, arg3 Std_vector_Sl_uint8_t_Sg_) (_swig_ret bool) {
	var swig_r bool
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3.Swigcptr()
	swig_r = (bool)(C._wrap_ED25519Key_Verify_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2)))
	return swig_r
}

type ED25519Key interface {
	Swigcptr() uintptr
	SwigIsED25519Key()
	GetPublicKey() (_swig_ret Std_vector_Sl_uint8_t_Sg_)
	GetPrivateKeyUnsafe() (_swig_ret Std_vector_Sl_uint8_t_Sg_)
	HasPrivateKey() (_swig_ret bool)
	Sign(arg2 Std_vector_Sl_uint8_t_Sg_) (_swig_ret Std_vector_Sl_uint8_t_Sg_)
	Verify(arg2 Std_vector_Sl_uint8_t_Sg_, arg3 Std_vector_Sl_uint8_t_Sg_) (_swig_ret bool)
}

type SwigcptrRIPEMD160 uintptr

func (p SwigcptrRIPEMD160) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrRIPEMD160) SwigIsRIPEMD160() {
}

func RIPEMD160Hash__SWIG_0(arg1 Std_vector_Sl_uint8_t_Sg_, arg2 Std_vector_Sl_uint8_t_Sg_) {
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2.Swigcptr()
	C._wrap_RIPEMD160_Hash__SWIG_0_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1))
}

func RIPEMD160Hash__SWIG_1(arg1 Std_vector_Sl_uint8_t_Sg_, arg2 *string) {
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2
	C._wrap_RIPEMD160_Hash__SWIG_1_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0), C.swig_voidp(_swig_i_1))
}

func RIPEMD160Hash__SWIG_2(arg1 string, arg2 Std_vector_Sl_uint8_t_Sg_) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	C._wrap_RIPEMD160_Hash__SWIG_2_cryptosdk_8fd4b13a305ceb16(*(*C.swig_type_21)(unsafe.Pointer(&_swig_i_0)), C.uintptr_t(_swig_i_1))
	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
}

func RIPEMD160Hash__SWIG_3(arg1 string, arg2 *string) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_RIPEMD160_Hash__SWIG_3_cryptosdk_8fd4b13a305ceb16(*(*C.swig_type_22)(unsafe.Pointer(&_swig_i_0)), C.swig_voidp(_swig_i_1))
	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
}

func RIPEMD160Hash(a ...interface{}) {
	argc := len(a)
	if argc == 2 {
		if _, ok := a[0].(SwigcptrStd_vector_Sl_uint8_t_Sg_); !ok {
			goto check_1
		}
		if _, ok := a[1].(SwigcptrStd_vector_Sl_uint8_t_Sg_); !ok {
			goto check_1
		}
		RIPEMD160Hash__SWIG_0(a[0].(Std_vector_Sl_uint8_t_Sg_), a[1].(Std_vector_Sl_uint8_t_Sg_))
		return
	}
check_1:
	if argc == 2 {
		if _, ok := a[0].(SwigcptrStd_vector_Sl_uint8_t_Sg_); !ok {
			goto check_2
		}
		if _, ok := a[1].(*string); !ok {
			goto check_2
		}
		RIPEMD160Hash__SWIG_1(a[0].(Std_vector_Sl_uint8_t_Sg_), a[1].(*string))
		return
	}
check_2:
	if argc == 2 {
		if _, ok := a[1].(SwigcptrStd_vector_Sl_uint8_t_Sg_); !ok {
			goto check_3
		}
		RIPEMD160Hash__SWIG_2(a[0].(string), a[1].(Std_vector_Sl_uint8_t_Sg_))
		return
	}
check_3:
	if argc == 2 {
		RIPEMD160Hash__SWIG_3(a[0].(string), a[1].(*string))
		return
	}
	panic("No match for overloaded function call")
}

func NewRIPEMD160() (_swig_ret RIPEMD160) {
	var swig_r RIPEMD160
	swig_r = (RIPEMD160)(SwigcptrRIPEMD160(C._wrap_new_RIPEMD160_cryptosdk_8fd4b13a305ceb16()))
	return swig_r
}

func DeleteRIPEMD160(arg1 RIPEMD160) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_delete_RIPEMD160_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0))
}

type RIPEMD160 interface {
	Swigcptr() uintptr
	SwigIsRIPEMD160()
}

type SwigcptrBase58 uintptr

func (p SwigcptrBase58) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrBase58) SwigIsBase58() {
}

func Base58Encode(arg1 Std_vector_Sl_uint8_t_Sg_) (_swig_ret string) {
	var swig_r string
	_swig_i_0 := arg1.Swigcptr()
	swig_r_p := C._wrap_Base58_Encode_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0))
	swig_r = *(*string)(unsafe.Pointer(&swig_r_p))
	var swig_r_1 string
 swig_r_1 = swigCopyString(swig_r) 
	return swig_r_1
}

func Base58Decode(arg1 string) (_swig_ret Std_vector_Sl_uint8_t_Sg_) {
	var swig_r Std_vector_Sl_uint8_t_Sg_
	_swig_i_0 := arg1
	swig_r = (Std_vector_Sl_uint8_t_Sg_)(SwigcptrStd_vector_Sl_uint8_t_Sg_(C._wrap_Base58_Decode_cryptosdk_8fd4b13a305ceb16(*(*C.swig_type_24)(unsafe.Pointer(&_swig_i_0)))))
	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
	return swig_r
}

func NewBase58() (_swig_ret Base58) {
	var swig_r Base58
	swig_r = (Base58)(SwigcptrBase58(C._wrap_new_Base58_cryptosdk_8fd4b13a305ceb16()))
	return swig_r
}

func DeleteBase58(arg1 Base58) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_delete_Base58_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0))
}

type Base58 interface {
	Swigcptr() uintptr
	SwigIsBase58()
}

type SwigcptrCRC32 uintptr

func (p SwigcptrCRC32) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrCRC32) SwigIsCRC32() {
}

func CRC32Hash__SWIG_0(arg1 Std_vector_Sl_uint8_t_Sg_, arg2 Std_vector_Sl_uint8_t_Sg_) {
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2.Swigcptr()
	C._wrap_CRC32_Hash__SWIG_0_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1))
}

func CRC32Hash__SWIG_1(arg1 Std_vector_Sl_uint8_t_Sg_, arg2 *string) {
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2
	C._wrap_CRC32_Hash__SWIG_1_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0), C.swig_voidp(_swig_i_1))
}

func CRC32Hash__SWIG_2(arg1 string, arg2 Std_vector_Sl_uint8_t_Sg_) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	C._wrap_CRC32_Hash__SWIG_2_cryptosdk_8fd4b13a305ceb16(*(*C.swig_type_25)(unsafe.Pointer(&_swig_i_0)), C.uintptr_t(_swig_i_1))
	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
}

func CRC32Hash__SWIG_3(arg1 string, arg2 *string) {
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	C._wrap_CRC32_Hash__SWIG_3_cryptosdk_8fd4b13a305ceb16(*(*C.swig_type_26)(unsafe.Pointer(&_swig_i_0)), C.swig_voidp(_swig_i_1))
	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
}

func CRC32Hash(a ...interface{}) {
	argc := len(a)
	if argc == 2 {
		if _, ok := a[0].(SwigcptrStd_vector_Sl_uint8_t_Sg_); !ok {
			goto check_1
		}
		if _, ok := a[1].(SwigcptrStd_vector_Sl_uint8_t_Sg_); !ok {
			goto check_1
		}
		CRC32Hash__SWIG_0(a[0].(Std_vector_Sl_uint8_t_Sg_), a[1].(Std_vector_Sl_uint8_t_Sg_))
		return
	}
check_1:
	if argc == 2 {
		if _, ok := a[0].(SwigcptrStd_vector_Sl_uint8_t_Sg_); !ok {
			goto check_2
		}
		if _, ok := a[1].(*string); !ok {
			goto check_2
		}
		CRC32Hash__SWIG_1(a[0].(Std_vector_Sl_uint8_t_Sg_), a[1].(*string))
		return
	}
check_2:
	if argc == 2 {
		if _, ok := a[1].(SwigcptrStd_vector_Sl_uint8_t_Sg_); !ok {
			goto check_3
		}
		CRC32Hash__SWIG_2(a[0].(string), a[1].(Std_vector_Sl_uint8_t_Sg_))
		return
	}
check_3:
	if argc == 2 {
		CRC32Hash__SWIG_3(a[0].(string), a[1].(*string))
		return
	}
	panic("No match for overloaded function call")
}

func NewCRC32() (_swig_ret CRC32) {
	var swig_r CRC32
	swig_r = (CRC32)(SwigcptrCRC32(C._wrap_new_CRC32_cryptosdk_8fd4b13a305ceb16()))
	return swig_r
}

func DeleteCRC32(arg1 CRC32) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_delete_CRC32_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0))
}

type CRC32 interface {
	Swigcptr() uintptr
	SwigIsCRC32()
}

type SwigcptrAddress uintptr

func (p SwigcptrAddress) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrAddress) SwigIsAddress() {
}

func GetAddressMAIN_NETWORK_ID() (_swig_ret Uint8_t) {
	var swig_r Uint8_t
	swig_r = (Uint8_t)(SwigcptrUint8_t(C._wrap_Address_MAIN_NETWORK_ID_get_cryptosdk_8fd4b13a305ceb16()))
	return swig_r
}

func GetAddressTEST_NETWORK_ID() (_swig_ret Uint8_t) {
	var swig_r Uint8_t
	swig_r = (Uint8_t)(SwigcptrUint8_t(C._wrap_Address_TEST_NETWORK_ID_get_cryptosdk_8fd4b13a305ceb16()))
	return swig_r
}

func GetAddressVERSION() (_swig_ret Uint8_t) {
	var swig_r Uint8_t
	swig_r = (Uint8_t)(SwigcptrUint8_t(C._wrap_Address_VERSION_get_cryptosdk_8fd4b13a305ceb16()))
	return swig_r
}

func GetAddressPUBLIC_KEY_SIZE() (_swig_ret Uint32_t) {
	var swig_r Uint32_t
	swig_r = (Uint32_t)(SwigcptrUint32_t(C._wrap_Address_PUBLIC_KEY_SIZE_get_cryptosdk_8fd4b13a305ceb16()))
	return swig_r
}

func GetAddressNETWORK_ID_SIZE() (_swig_ret Uint32_t) {
	var swig_r Uint32_t
	swig_r = (Uint32_t)(SwigcptrUint32_t(C._wrap_Address_NETWORK_ID_SIZE_get_cryptosdk_8fd4b13a305ceb16()))
	return swig_r
}

func GetAddressVERSION_SIZE() (_swig_ret Uint32_t) {
	var swig_r Uint32_t
	swig_r = (Uint32_t)(SwigcptrUint32_t(C._wrap_Address_VERSION_SIZE_get_cryptosdk_8fd4b13a305ceb16()))
	return swig_r
}

func GetAddressVIRTUAL_CHAIN_ID_SIZE() (_swig_ret Uint32_t) {
	var swig_r Uint32_t
	swig_r = (Uint32_t)(SwigcptrUint32_t(C._wrap_Address_VIRTUAL_CHAIN_ID_SIZE_get_cryptosdk_8fd4b13a305ceb16()))
	return swig_r
}

func GetAddressVIRTUAL_CHAIN_ID_MSB() (_swig_ret Uint8_t) {
	var swig_r Uint8_t
	swig_r = (Uint8_t)(SwigcptrUint8_t(C._wrap_Address_VIRTUAL_CHAIN_ID_MSB_get_cryptosdk_8fd4b13a305ceb16()))
	return swig_r
}

func GetAddressACCOUNT_ID_SIZE() (_swig_ret Uint32_t) {
	var swig_r Uint32_t
	swig_r = (Uint32_t)(SwigcptrUint32_t(C._wrap_Address_ACCOUNT_ID_SIZE_get_cryptosdk_8fd4b13a305ceb16()))
	return swig_r
}

func GetAddressCHECKSUM_SIZE() (_swig_ret Uint32_t) {
	var swig_r Uint32_t
	swig_r = (Uint32_t)(SwigcptrUint32_t(C._wrap_Address_CHECKSUM_SIZE_get_cryptosdk_8fd4b13a305ceb16()))
	return swig_r
}

func GetAddressADDRESS_LENGTH() (_swig_ret Uint32_t) {
	var swig_r Uint32_t
	swig_r = (Uint32_t)(SwigcptrUint32_t(C._wrap_Address_ADDRESS_LENGTH_get_cryptosdk_8fd4b13a305ceb16()))
	return swig_r
}

func NewAddress__SWIG_0(arg1 Std_vector_Sl_uint8_t_Sg_, arg2 Std_vector_Sl_uint8_t_Sg_, arg3 Uint8_t) (_swig_ret Address) {
	var swig_r Address
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3.Swigcptr()
	swig_r = (Address)(SwigcptrAddress(C._wrap_new_Address__SWIG_0_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2))))
	return swig_r
}

func NewAddress__SWIG_1(arg1 string, arg2 string, arg3 string) (_swig_ret Address) {
	var swig_r Address
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	swig_r = (Address)(SwigcptrAddress(C._wrap_new_Address__SWIG_1_cryptosdk_8fd4b13a305ceb16(*(*C.swig_type_27)(unsafe.Pointer(&_swig_i_0)), *(*C.swig_type_28)(unsafe.Pointer(&_swig_i_1)), *(*C.swig_type_29)(unsafe.Pointer(&_swig_i_2)))))
	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	if Swig_escape_always_false {
		Swig_escape_val = arg3
	}
	return swig_r
}

func NewAddress__SWIG_2(arg1 ED25519Key, arg2 Std_vector_Sl_uint8_t_Sg_, arg3 Uint8_t) (_swig_ret Address) {
	var swig_r Address
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3.Swigcptr()
	swig_r = (Address)(SwigcptrAddress(C._wrap_new_Address__SWIG_2_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.uintptr_t(_swig_i_2))))
	return swig_r
}

func NewAddress(a ...interface{}) Address {
	argc := len(a)
	if argc == 3 {
		if _, ok := a[0].(SwigcptrStd_vector_Sl_uint8_t_Sg_); !ok {
			goto check_1
		}
		if _, ok := a[1].(SwigcptrStd_vector_Sl_uint8_t_Sg_); !ok {
			goto check_1
		}
		if _, ok := a[2].(SwigcptrUint8_t); !ok {
			goto check_1
		}
		return NewAddress__SWIG_0(a[0].(Std_vector_Sl_uint8_t_Sg_), a[1].(Std_vector_Sl_uint8_t_Sg_), a[2].(Uint8_t))
	}
check_1:
	if argc == 3 {
		if _, ok := a[0].(string); !ok {
			goto check_2
		}
		if _, ok := a[1].(string); !ok {
			goto check_2
		}
		if _, ok := a[2].(string); !ok {
			goto check_2
		}
		return NewAddress__SWIG_1(a[0].(string), a[1].(string), a[2].(string))
	}
check_2:
	if argc == 3 {
		return NewAddress__SWIG_2(a[0].(ED25519Key), a[1].(Std_vector_Sl_uint8_t_Sg_), a[2].(Uint8_t))
	}
	panic("No match for overloaded function call")
}

func DeleteAddress(arg1 Address) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_delete_Address_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0))
}

func (arg1 SwigcptrAddress) GetPublicKey() (_swig_ret Std_vector_Sl_uint8_t_Sg_) {
	var swig_r Std_vector_Sl_uint8_t_Sg_
	_swig_i_0 := arg1
	swig_r = (Std_vector_Sl_uint8_t_Sg_)(SwigcptrStd_vector_Sl_uint8_t_Sg_(C._wrap_Address_GetPublicKey_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0))))
	return swig_r
}

func (arg1 SwigcptrAddress) GetNetworkId() (_swig_ret Uint8_t) {
	var swig_r Uint8_t
	_swig_i_0 := arg1
	swig_r = (Uint8_t)(SwigcptrUint8_t(C._wrap_Address_GetNetworkId_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0))))
	return swig_r
}

func (arg1 SwigcptrAddress) GetVersion() (_swig_ret Uint8_t) {
	var swig_r Uint8_t
	_swig_i_0 := arg1
	swig_r = (Uint8_t)(SwigcptrUint8_t(C._wrap_Address_GetVersion_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0))))
	return swig_r
}

func (arg1 SwigcptrAddress) GetVirtualChainId() (_swig_ret Std_vector_Sl_uint8_t_Sg_) {
	var swig_r Std_vector_Sl_uint8_t_Sg_
	_swig_i_0 := arg1
	swig_r = (Std_vector_Sl_uint8_t_Sg_)(SwigcptrStd_vector_Sl_uint8_t_Sg_(C._wrap_Address_GetVirtualChainId_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0))))
	return swig_r
}

func (arg1 SwigcptrAddress) GetAccountId() (_swig_ret Std_vector_Sl_uint8_t_Sg_) {
	var swig_r Std_vector_Sl_uint8_t_Sg_
	_swig_i_0 := arg1
	swig_r = (Std_vector_Sl_uint8_t_Sg_)(SwigcptrStd_vector_Sl_uint8_t_Sg_(C._wrap_Address_GetAccountId_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0))))
	return swig_r
}

func (arg1 SwigcptrAddress) GetChecksum() (_swig_ret Std_vector_Sl_uint8_t_Sg_) {
	var swig_r Std_vector_Sl_uint8_t_Sg_
	_swig_i_0 := arg1
	swig_r = (Std_vector_Sl_uint8_t_Sg_)(SwigcptrStd_vector_Sl_uint8_t_Sg_(C._wrap_Address_GetChecksum_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0))))
	return swig_r
}

func (arg1 SwigcptrAddress) ToString() (_swig_ret string) {
	var swig_r string
	_swig_i_0 := arg1
	swig_r_p := C._wrap_Address_ToString_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0))
	swig_r = *(*string)(unsafe.Pointer(&swig_r_p))
	var swig_r_1 string
 swig_r_1 = swigCopyString(swig_r) 
	return swig_r_1
}

func AddressIsValidNetworkId(arg1 Uint8_t) (_swig_ret bool) {
	var swig_r bool
	_swig_i_0 := arg1.Swigcptr()
	swig_r = (bool)(C._wrap_Address_IsValidNetworkId_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func AddressIsValidVersion(arg1 Uint8_t) (_swig_ret bool) {
	var swig_r bool
	_swig_i_0 := arg1.Swigcptr()
	swig_r = (bool)(C._wrap_Address_IsValidVersion_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func AddressIsValidVirtualChainId(arg1 Std_vector_Sl_uint8_t_Sg_) (_swig_ret bool) {
	var swig_r bool
	_swig_i_0 := arg1.Swigcptr()
	swig_r = (bool)(C._wrap_Address_IsValidVirtualChainId_cryptosdk_8fd4b13a305ceb16(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func AddressIsValid(arg1 string) (_swig_ret bool) {
	var swig_r bool
	_swig_i_0 := arg1
	swig_r = (bool)(C._wrap_Address_IsValid_cryptosdk_8fd4b13a305ceb16(*(*C.swig_type_31)(unsafe.Pointer(&_swig_i_0))))
	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
	return swig_r
}

type Address interface {
	Swigcptr() uintptr
	SwigIsAddress()
	GetPublicKey() (_swig_ret Std_vector_Sl_uint8_t_Sg_)
	GetNetworkId() (_swig_ret Uint8_t)
	GetVersion() (_swig_ret Uint8_t)
	GetVirtualChainId() (_swig_ret Std_vector_Sl_uint8_t_Sg_)
	GetAccountId() (_swig_ret Std_vector_Sl_uint8_t_Sg_)
	GetChecksum() (_swig_ret Std_vector_Sl_uint8_t_Sg_)
	ToString() (_swig_ret string)
}


type SwigcptrStd_vector_Sl_uint8_t_Sg_ uintptr
type Std_vector_Sl_uint8_t_Sg_ interface {
	Swigcptr() uintptr;
}
func (p SwigcptrStd_vector_Sl_uint8_t_Sg_) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrUint32_t uintptr
type Uint32_t interface {
	Swigcptr() uintptr;
}
func (p SwigcptrUint32_t) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrUint8_t uintptr
type Uint8_t interface {
	Swigcptr() uintptr;
}
func (p SwigcptrUint8_t) Swigcptr() uintptr {
	return uintptr(p)
}

