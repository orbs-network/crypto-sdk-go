/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: crypto-sdk/lib/cryptosdk.swigcxx

#define SWIGMODULE cryptosdk

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



typedef long long intgo;
typedef unsigned long long uintgo;


# if !defined(__clang__) && (defined(__i386__) || defined(__x86_64__))
#   define SWIGSTRUCTPACKED __attribute__((__packed__, __gcc_struct__))
# else
#   define SWIGSTRUCTPACKED __attribute__((__packed__))
# endif



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;




#define swiggo_size_assert_eq(x, y, name) typedef char name[(x-y)*(x-y)*-2+1];
#define swiggo_size_assert(t, n) swiggo_size_assert_eq(sizeof(t), n, swiggo_sizeof_##t##_is_not_##n)

swiggo_size_assert(char, 1)
swiggo_size_assert(short, 2)
swiggo_size_assert(int, 4)
typedef long long swiggo_long_long;
swiggo_size_assert(swiggo_long_long, 8)
swiggo_size_assert(float, 4)
swiggo_size_assert(double, 8)

#ifdef __cplusplus
extern "C" {
#endif
extern void crosscall2(void (*fn)(void *, int), void *, int);
extern char* _cgo_topofstack(void) __attribute__ ((weak));
extern void _cgo_allocate(void *, int);
extern void _cgo_panic(void *, int);
#ifdef __cplusplus
}
#endif

static char *_swig_topofstack() {
  if (_cgo_topofstack) {
    return _cgo_topofstack();
  } else {
    return 0;
  }
}

static void _swig_gopanic(const char *p) {
  struct {
    const char *p;
  } SWIGSTRUCTPACKED a;
  a.p = p;
  crosscall2(_cgo_panic, &a, (int) sizeof a);
}




#define SWIG_contract_assert(expr, msg) \
  if (!(expr)) { _swig_gopanic(msg); } else


static _gostring_ Swig_AllocateString(const char *p, size_t l) {
  _gostring_ ret;
  ret.p = (char*)malloc(l);
  memcpy(ret.p, p, l);
  ret.n = l;
  return ret;
}


static void Swig_free(void* p) {
  free(p);
}

static void* Swig_malloc(int c) {
  return malloc(c);
}


#include <string>


#include <vector>
#include <stdexcept>

SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< char >::const_reference std_vector_Sl_char_Sg__get(std::vector< char > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_char_Sg__set(std::vector< char > *self,int i,std::vector< char >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#include "utils.h"
#include "crypto.h"
#include "sha256.h"
#include "sha512.h"
#include "ed25519key.h"
#include "ripemd160.h"
#include "base58.h"
#include "crc32.h"
#include "address.h"

#ifdef __cplusplus
extern "C" {
#endif

void _wrap_Swig_free_cryptosdk_8fd4b13a305ceb16(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;
  
  arg1 = *(void **)&_swig_go_0; 
  
  Swig_free(arg1);
  
}


void *_wrap_Swig_malloc_cryptosdk_8fd4b13a305ceb16(intgo _swig_go_0) {
  int arg1 ;
  void *result = 0 ;
  void *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (void *)Swig_malloc(arg1);
  *(void **)&_swig_go_result = (void *)result; 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_new_StringVector__SWIG_0_cryptosdk_8fd4b13a305ceb16() {
  std::vector< std::string > *result = 0 ;
  std::vector< std::string > *_swig_go_result;
  
  
  result = (std::vector< std::string > *)new std::vector< std::string >();
  *(std::vector< std::string > **)&_swig_go_result = (std::vector< std::string > *)result; 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_new_StringVector__SWIG_1_cryptosdk_8fd4b13a305ceb16(long long _swig_go_0) {
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string > *result = 0 ;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  *(std::vector< std::string > **)&_swig_go_result = (std::vector< std::string > *)result; 
  return _swig_go_result;
}


long long _wrap_StringVector_size_cryptosdk_8fd4b13a305ceb16(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  result = ((std::vector< std::string > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_StringVector_capacity_cryptosdk_8fd4b13a305ceb16(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  result = ((std::vector< std::string > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_StringVector_reserve_cryptosdk_8fd4b13a305ceb16(std::vector< std::string > *_swig_go_0, long long _swig_go_1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_StringVector_isEmpty_cryptosdk_8fd4b13a305ceb16(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_StringVector_clear_cryptosdk_8fd4b13a305ceb16(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_StringVector_add_cryptosdk_8fd4b13a305ceb16(std::vector< std::string > *_swig_go_0, _gostring_ _swig_go_1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  std::vector< std::string >::value_type arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
  
}


_gostring_ _wrap_StringVector_get_cryptosdk_8fd4b13a305ceb16(std::vector< std::string > *_swig_go_0, intgo _swig_go_1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_StringVector_set_cryptosdk_8fd4b13a305ceb16(std::vector< std::string > *_swig_go_0, intgo _swig_go_1, _gostring_ _swig_go_2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  std::vector< std::string >::value_type arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  try {
    std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
  
}


void _wrap_delete_StringVector_cryptosdk_8fd4b13a305ceb16(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< char > *_wrap_new_ByteVector__SWIG_0_cryptosdk_8fd4b13a305ceb16() {
  std::vector< char > *result = 0 ;
  std::vector< char > *_swig_go_result;
  
  
  result = (std::vector< char > *)new std::vector< char >();
  *(std::vector< char > **)&_swig_go_result = (std::vector< char > *)result; 
  return _swig_go_result;
}


std::vector< char > *_wrap_new_ByteVector__SWIG_1_cryptosdk_8fd4b13a305ceb16(long long _swig_go_0) {
  std::vector< char >::size_type arg1 ;
  std::vector< char > *result = 0 ;
  std::vector< char > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  result = (std::vector< char > *)new std::vector< char >(arg1);
  *(std::vector< char > **)&_swig_go_result = (std::vector< char > *)result; 
  return _swig_go_result;
}


long long _wrap_ByteVector_size_cryptosdk_8fd4b13a305ceb16(std::vector< char > *_swig_go_0) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< char > **)&_swig_go_0; 
  
  result = ((std::vector< char > const *)arg1)->size();
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_ByteVector_capacity_cryptosdk_8fd4b13a305ceb16(std::vector< char > *_swig_go_0) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< char > **)&_swig_go_0; 
  
  result = ((std::vector< char > const *)arg1)->capacity();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ByteVector_reserve_cryptosdk_8fd4b13a305ceb16(std::vector< char > *_swig_go_0, long long _swig_go_1) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type arg2 ;
  
  arg1 = *(std::vector< char > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  (arg1)->reserve(arg2);
  
}


bool _wrap_ByteVector_isEmpty_cryptosdk_8fd4b13a305ceb16(std::vector< char > *_swig_go_0) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< char > **)&_swig_go_0; 
  
  result = (bool)((std::vector< char > const *)arg1)->empty();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ByteVector_clear_cryptosdk_8fd4b13a305ceb16(std::vector< char > *_swig_go_0) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  
  arg1 = *(std::vector< char > **)&_swig_go_0; 
  
  (arg1)->clear();
  
}


void _wrap_ByteVector_add_cryptosdk_8fd4b13a305ceb16(std::vector< char > *_swig_go_0, char _swig_go_1) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< char > **)&_swig_go_0; 
  arg2 = (std::vector< char >::value_type *)&_swig_go_1; 
  
  (arg1)->push_back((std::vector< char >::value_type const &)*arg2);
  
}


char _wrap_ByteVector_get_cryptosdk_8fd4b13a305ceb16(std::vector< char > *_swig_go_0, intgo _swig_go_1) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  std::vector< char >::value_type *result = 0 ;
  char _swig_go_result;
  
  arg1 = *(std::vector< char > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  try {
    result = (std::vector< char >::value_type *) &std_vector_Sl_char_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
  _swig_go_result = (char)*result; 
  return _swig_go_result;
}


void _wrap_ByteVector_set_cryptosdk_8fd4b13a305ceb16(std::vector< char > *_swig_go_0, intgo _swig_go_1, char _swig_go_2) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  std::vector< char >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< char > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (std::vector< char >::value_type *)&_swig_go_2; 
  
  try {
    std_vector_Sl_char_Sg__set(arg1,arg2,(char const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    (void)_e;
    _swig_gopanic("C++ std::out_of_range exception thrown");
    
  }
  
  
}


void _wrap_delete_ByteVector_cryptosdk_8fd4b13a305ceb16(std::vector< char > *_swig_go_0) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  
  arg1 = *(std::vector< char > **)&_swig_go_0; 
  
  delete arg1;
  
}


_gostring_ _wrap_Utils_Vec2Hex_cryptosdk_8fd4b13a305ceb16(std::vector< uint8_t > *_swig_go_0) {
  std::vector< uint8_t > *arg1 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(std::vector< uint8_t > **)&_swig_go_0; 
  
  result = Orbs::Utils::Vec2Hex((std::vector< uint8_t > const &)*arg1);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


std::vector< uint8_t > *_wrap_Utils_Hex2Vec_cryptosdk_8fd4b13a305ceb16(_gostring_ _swig_go_0) {
  std::string *arg1 = 0 ;
  SwigValueWrapper< std::vector< uint8_t > > result;
  std::vector< uint8_t > *_swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  result = Orbs::Utils::Hex2Vec((std::string const &)*arg1);
  *(std::vector< uint8_t > **)&_swig_go_result = new std::vector< uint8_t >(result); 
  return _swig_go_result;
}


Orbs::Utils *_wrap_new_Utils_cryptosdk_8fd4b13a305ceb16() {
  Orbs::Utils *result = 0 ;
  Orbs::Utils *_swig_go_result;
  
  
  result = (Orbs::Utils *)new Orbs::Utils();
  *(Orbs::Utils **)&_swig_go_result = (Orbs::Utils *)result; 
  return _swig_go_result;
}


void _wrap_delete_Utils_cryptosdk_8fd4b13a305ceb16(Orbs::Utils *_swig_go_0) {
  Orbs::Utils *arg1 = (Orbs::Utils *) 0 ;
  
  arg1 = *(Orbs::Utils **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_CryptoSDK_Init_cryptosdk_8fd4b13a305ceb16() {
  Orbs::CryptoSDK::Init();
  
}


bool _wrap_CryptoSDK_IsInitialized_cryptosdk_8fd4b13a305ceb16() {
  bool result;
  bool _swig_go_result;
  
  
  result = (bool)Orbs::CryptoSDK::IsInitialized();
  _swig_go_result = result; 
  return _swig_go_result;
}


Orbs::CryptoSDK *_wrap_new_CryptoSDK_cryptosdk_8fd4b13a305ceb16() {
  Orbs::CryptoSDK *result = 0 ;
  Orbs::CryptoSDK *_swig_go_result;
  
  
  result = (Orbs::CryptoSDK *)new Orbs::CryptoSDK();
  *(Orbs::CryptoSDK **)&_swig_go_result = (Orbs::CryptoSDK *)result; 
  return _swig_go_result;
}


void _wrap_delete_CryptoSDK_cryptosdk_8fd4b13a305ceb16(Orbs::CryptoSDK *_swig_go_0) {
  Orbs::CryptoSDK *arg1 = (Orbs::CryptoSDK *) 0 ;
  
  arg1 = *(Orbs::CryptoSDK **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_SHA256_Hash__SWIG_0_cryptosdk_8fd4b13a305ceb16(std::vector< uint8_t > *_swig_go_0, std::vector< uint8_t > *_swig_go_1) {
  std::vector< uint8_t > *arg1 = 0 ;
  std::vector< uint8_t > *arg2 = 0 ;
  
  arg1 = *(std::vector< uint8_t > **)&_swig_go_0; 
  arg2 = *(std::vector< uint8_t > **)&_swig_go_1; 
  
  Orbs::SHA256::Hash((std::vector< uint8_t > const &)*arg1,*arg2);
  
}


void _wrap_SHA256_Hash__SWIG_1_cryptosdk_8fd4b13a305ceb16(std::vector< uint8_t > *_swig_go_0, std::string *_swig_go_1) {
  std::vector< uint8_t > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(std::vector< uint8_t > **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  
  Orbs::SHA256::Hash((std::vector< uint8_t > const &)*arg1,*arg2);
  
}


void _wrap_SHA256_Hash__SWIG_2_cryptosdk_8fd4b13a305ceb16(_gostring_ _swig_go_0, std::vector< uint8_t > *_swig_go_1) {
  std::string *arg1 = 0 ;
  std::vector< uint8_t > *arg2 = 0 ;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  arg2 = *(std::vector< uint8_t > **)&_swig_go_1; 
  
  Orbs::SHA256::Hash((std::string const &)*arg1,*arg2);
  
}


void _wrap_SHA256_Hash__SWIG_3_cryptosdk_8fd4b13a305ceb16(_gostring_ _swig_go_0, std::string *_swig_go_1) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  arg2 = *(std::string **)&_swig_go_1; 
  
  Orbs::SHA256::Hash((std::string const &)*arg1,*arg2);
  
}


Orbs::SHA256 *_wrap_new_SHA256_cryptosdk_8fd4b13a305ceb16() {
  Orbs::SHA256 *result = 0 ;
  Orbs::SHA256 *_swig_go_result;
  
  
  result = (Orbs::SHA256 *)new Orbs::SHA256();
  *(Orbs::SHA256 **)&_swig_go_result = (Orbs::SHA256 *)result; 
  return _swig_go_result;
}


void _wrap_delete_SHA256_cryptosdk_8fd4b13a305ceb16(Orbs::SHA256 *_swig_go_0) {
  Orbs::SHA256 *arg1 = (Orbs::SHA256 *) 0 ;
  
  arg1 = *(Orbs::SHA256 **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_SHA512_Hash__SWIG_0_cryptosdk_8fd4b13a305ceb16(std::vector< uint8_t > *_swig_go_0, std::vector< uint8_t > *_swig_go_1) {
  std::vector< uint8_t > *arg1 = 0 ;
  std::vector< uint8_t > *arg2 = 0 ;
  
  arg1 = *(std::vector< uint8_t > **)&_swig_go_0; 
  arg2 = *(std::vector< uint8_t > **)&_swig_go_1; 
  
  Orbs::SHA512::Hash((std::vector< uint8_t > const &)*arg1,*arg2);
  
}


void _wrap_SHA512_Hash__SWIG_1_cryptosdk_8fd4b13a305ceb16(std::vector< uint8_t > *_swig_go_0, std::string *_swig_go_1) {
  std::vector< uint8_t > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(std::vector< uint8_t > **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  
  Orbs::SHA512::Hash((std::vector< uint8_t > const &)*arg1,*arg2);
  
}


void _wrap_SHA512_Hash__SWIG_2_cryptosdk_8fd4b13a305ceb16(_gostring_ _swig_go_0, std::vector< uint8_t > *_swig_go_1) {
  std::string *arg1 = 0 ;
  std::vector< uint8_t > *arg2 = 0 ;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  arg2 = *(std::vector< uint8_t > **)&_swig_go_1; 
  
  Orbs::SHA512::Hash((std::string const &)*arg1,*arg2);
  
}


void _wrap_SHA512_Hash__SWIG_3_cryptosdk_8fd4b13a305ceb16(_gostring_ _swig_go_0, std::string *_swig_go_1) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  arg2 = *(std::string **)&_swig_go_1; 
  
  Orbs::SHA512::Hash((std::string const &)*arg1,*arg2);
  
}


Orbs::SHA512 *_wrap_new_SHA512_cryptosdk_8fd4b13a305ceb16() {
  Orbs::SHA512 *result = 0 ;
  Orbs::SHA512 *_swig_go_result;
  
  
  result = (Orbs::SHA512 *)new Orbs::SHA512();
  *(Orbs::SHA512 **)&_swig_go_result = (Orbs::SHA512 *)result; 
  return _swig_go_result;
}


void _wrap_delete_SHA512_cryptosdk_8fd4b13a305ceb16(Orbs::SHA512 *_swig_go_0) {
  Orbs::SHA512 *arg1 = (Orbs::SHA512 *) 0 ;
  
  arg1 = *(Orbs::SHA512 **)&_swig_go_0; 
  
  delete arg1;
  
}


uint8_t *_wrap_ED25519Key_PUBLIC_KEY_SIZE_get_cryptosdk_8fd4b13a305ceb16() {
  uint8_t result;
  uint8_t *_swig_go_result;
  
  
  result = (uint8_t)Orbs::ED25519Key::PUBLIC_KEY_SIZE;
  *(uint8_t **)&_swig_go_result = new uint8_t(result); 
  return _swig_go_result;
}


uint8_t *_wrap_ED25519Key_PRIVATE_KEY_SIZE_get_cryptosdk_8fd4b13a305ceb16() {
  uint8_t result;
  uint8_t *_swig_go_result;
  
  
  result = (uint8_t)Orbs::ED25519Key::PRIVATE_KEY_SIZE;
  *(uint8_t **)&_swig_go_result = new uint8_t(result); 
  return _swig_go_result;
}


uint8_t *_wrap_ED25519Key_SIGNATURE_SIZE_get_cryptosdk_8fd4b13a305ceb16() {
  uint8_t result;
  uint8_t *_swig_go_result;
  
  
  result = (uint8_t)Orbs::ED25519Key::SIGNATURE_SIZE;
  *(uint8_t **)&_swig_go_result = new uint8_t(result); 
  return _swig_go_result;
}


Orbs::ED25519Key *_wrap_new_ED25519Key__SWIG_0_cryptosdk_8fd4b13a305ceb16() {
  Orbs::ED25519Key *result = 0 ;
  Orbs::ED25519Key *_swig_go_result;
  
  
  result = (Orbs::ED25519Key *)new Orbs::ED25519Key();
  *(Orbs::ED25519Key **)&_swig_go_result = (Orbs::ED25519Key *)result; 
  return _swig_go_result;
}


Orbs::ED25519Key *_wrap_new_ED25519Key__SWIG_1_cryptosdk_8fd4b13a305ceb16(std::vector< uint8_t > *_swig_go_0) {
  std::vector< uint8_t > *arg1 = 0 ;
  Orbs::ED25519Key *result = 0 ;
  Orbs::ED25519Key *_swig_go_result;
  
  arg1 = *(std::vector< uint8_t > **)&_swig_go_0; 
  
  result = (Orbs::ED25519Key *)new Orbs::ED25519Key((std::vector< uint8_t > const &)*arg1);
  *(Orbs::ED25519Key **)&_swig_go_result = (Orbs::ED25519Key *)result; 
  return _swig_go_result;
}


Orbs::ED25519Key *_wrap_new_ED25519Key__SWIG_2_cryptosdk_8fd4b13a305ceb16(_gostring_ _swig_go_0) {
  std::string *arg1 = 0 ;
  Orbs::ED25519Key *result = 0 ;
  Orbs::ED25519Key *_swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  result = (Orbs::ED25519Key *)new Orbs::ED25519Key((std::string const &)*arg1);
  *(Orbs::ED25519Key **)&_swig_go_result = (Orbs::ED25519Key *)result; 
  return _swig_go_result;
}


Orbs::ED25519Key *_wrap_new_ED25519Key__SWIG_3_cryptosdk_8fd4b13a305ceb16(std::vector< uint8_t > *_swig_go_0, std::vector< uint8_t > *_swig_go_1) {
  std::vector< uint8_t > *arg1 = 0 ;
  std::vector< uint8_t > *arg2 = 0 ;
  Orbs::ED25519Key *result = 0 ;
  Orbs::ED25519Key *_swig_go_result;
  
  arg1 = *(std::vector< uint8_t > **)&_swig_go_0; 
  arg2 = *(std::vector< uint8_t > **)&_swig_go_1; 
  
  result = (Orbs::ED25519Key *)new Orbs::ED25519Key((std::vector< uint8_t > const &)*arg1,(std::vector< uint8_t > const &)*arg2);
  *(Orbs::ED25519Key **)&_swig_go_result = (Orbs::ED25519Key *)result; 
  return _swig_go_result;
}


Orbs::ED25519Key *_wrap_new_ED25519Key__SWIG_4_cryptosdk_8fd4b13a305ceb16(_gostring_ _swig_go_0, _gostring_ _swig_go_1) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  Orbs::ED25519Key *result = 0 ;
  Orbs::ED25519Key *_swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  result = (Orbs::ED25519Key *)new Orbs::ED25519Key((std::string const &)*arg1,(std::string const &)*arg2);
  *(Orbs::ED25519Key **)&_swig_go_result = (Orbs::ED25519Key *)result; 
  return _swig_go_result;
}


void _wrap_delete_ED25519Key_cryptosdk_8fd4b13a305ceb16(Orbs::ED25519Key *_swig_go_0) {
  Orbs::ED25519Key *arg1 = (Orbs::ED25519Key *) 0 ;
  
  arg1 = *(Orbs::ED25519Key **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< uint8_t > *_wrap_ED25519Key_GetPublicKey_cryptosdk_8fd4b13a305ceb16(Orbs::ED25519Key *_swig_go_0) {
  Orbs::ED25519Key *arg1 = (Orbs::ED25519Key *) 0 ;
  SwigValueWrapper< std::vector< uint8_t > > result;
  std::vector< uint8_t > *_swig_go_result;
  
  arg1 = *(Orbs::ED25519Key **)&_swig_go_0; 
  
  result = ((Orbs::ED25519Key const *)arg1)->GetPublicKey();
  *(std::vector< uint8_t > **)&_swig_go_result = new std::vector< uint8_t >(result); 
  return _swig_go_result;
}


std::vector< uint8_t > *_wrap_ED25519Key_GetPrivateKeyUnsafe_cryptosdk_8fd4b13a305ceb16(Orbs::ED25519Key *_swig_go_0) {
  Orbs::ED25519Key *arg1 = (Orbs::ED25519Key *) 0 ;
  SwigValueWrapper< std::vector< uint8_t > > result;
  std::vector< uint8_t > *_swig_go_result;
  
  arg1 = *(Orbs::ED25519Key **)&_swig_go_0; 
  
  result = ((Orbs::ED25519Key const *)arg1)->GetPrivateKeyUnsafe();
  *(std::vector< uint8_t > **)&_swig_go_result = new std::vector< uint8_t >(result); 
  return _swig_go_result;
}


bool _wrap_ED25519Key_HasPrivateKey_cryptosdk_8fd4b13a305ceb16(Orbs::ED25519Key *_swig_go_0) {
  Orbs::ED25519Key *arg1 = (Orbs::ED25519Key *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Orbs::ED25519Key **)&_swig_go_0; 
  
  result = (bool)((Orbs::ED25519Key const *)arg1)->HasPrivateKey();
  _swig_go_result = result; 
  return _swig_go_result;
}


std::vector< uint8_t > *_wrap_ED25519Key_Sign_cryptosdk_8fd4b13a305ceb16(Orbs::ED25519Key *_swig_go_0, std::vector< uint8_t > *_swig_go_1) {
  Orbs::ED25519Key *arg1 = (Orbs::ED25519Key *) 0 ;
  std::vector< uint8_t > *arg2 = 0 ;
  SwigValueWrapper< std::vector< uint8_t > > result;
  std::vector< uint8_t > *_swig_go_result;
  
  arg1 = *(Orbs::ED25519Key **)&_swig_go_0; 
  arg2 = *(std::vector< uint8_t > **)&_swig_go_1; 
  
  result = ((Orbs::ED25519Key const *)arg1)->Sign((std::vector< uint8_t > const &)*arg2);
  *(std::vector< uint8_t > **)&_swig_go_result = new std::vector< uint8_t >(result); 
  return _swig_go_result;
}


bool _wrap_ED25519Key_Verify_cryptosdk_8fd4b13a305ceb16(Orbs::ED25519Key *_swig_go_0, std::vector< uint8_t > *_swig_go_1, std::vector< uint8_t > *_swig_go_2) {
  Orbs::ED25519Key *arg1 = (Orbs::ED25519Key *) 0 ;
  std::vector< uint8_t > *arg2 = 0 ;
  std::vector< uint8_t > *arg3 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(Orbs::ED25519Key **)&_swig_go_0; 
  arg2 = *(std::vector< uint8_t > **)&_swig_go_1; 
  arg3 = *(std::vector< uint8_t > **)&_swig_go_2; 
  
  result = (bool)((Orbs::ED25519Key const *)arg1)->Verify((std::vector< uint8_t > const &)*arg2,(std::vector< uint8_t > const &)*arg3);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RIPEMD160_Hash__SWIG_0_cryptosdk_8fd4b13a305ceb16(std::vector< uint8_t > *_swig_go_0, std::vector< uint8_t > *_swig_go_1) {
  std::vector< uint8_t > *arg1 = 0 ;
  std::vector< uint8_t > *arg2 = 0 ;
  
  arg1 = *(std::vector< uint8_t > **)&_swig_go_0; 
  arg2 = *(std::vector< uint8_t > **)&_swig_go_1; 
  
  Orbs::RIPEMD160::Hash((std::vector< uint8_t > const &)*arg1,*arg2);
  
}


void _wrap_RIPEMD160_Hash__SWIG_1_cryptosdk_8fd4b13a305ceb16(std::vector< uint8_t > *_swig_go_0, std::string *_swig_go_1) {
  std::vector< uint8_t > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(std::vector< uint8_t > **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  
  Orbs::RIPEMD160::Hash((std::vector< uint8_t > const &)*arg1,*arg2);
  
}


void _wrap_RIPEMD160_Hash__SWIG_2_cryptosdk_8fd4b13a305ceb16(_gostring_ _swig_go_0, std::vector< uint8_t > *_swig_go_1) {
  std::string *arg1 = 0 ;
  std::vector< uint8_t > *arg2 = 0 ;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  arg2 = *(std::vector< uint8_t > **)&_swig_go_1; 
  
  Orbs::RIPEMD160::Hash((std::string const &)*arg1,*arg2);
  
}


void _wrap_RIPEMD160_Hash__SWIG_3_cryptosdk_8fd4b13a305ceb16(_gostring_ _swig_go_0, std::string *_swig_go_1) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  arg2 = *(std::string **)&_swig_go_1; 
  
  Orbs::RIPEMD160::Hash((std::string const &)*arg1,*arg2);
  
}


Orbs::RIPEMD160 *_wrap_new_RIPEMD160_cryptosdk_8fd4b13a305ceb16() {
  Orbs::RIPEMD160 *result = 0 ;
  Orbs::RIPEMD160 *_swig_go_result;
  
  
  result = (Orbs::RIPEMD160 *)new Orbs::RIPEMD160();
  *(Orbs::RIPEMD160 **)&_swig_go_result = (Orbs::RIPEMD160 *)result; 
  return _swig_go_result;
}


void _wrap_delete_RIPEMD160_cryptosdk_8fd4b13a305ceb16(Orbs::RIPEMD160 *_swig_go_0) {
  Orbs::RIPEMD160 *arg1 = (Orbs::RIPEMD160 *) 0 ;
  
  arg1 = *(Orbs::RIPEMD160 **)&_swig_go_0; 
  
  delete arg1;
  
}


_gostring_ _wrap_Base58_Encode_cryptosdk_8fd4b13a305ceb16(std::vector< uint8_t > *_swig_go_0) {
  std::vector< uint8_t > *arg1 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(std::vector< uint8_t > **)&_swig_go_0; 
  
  result = Orbs::Base58::Encode((std::vector< uint8_t > const &)*arg1);
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


std::vector< uint8_t > *_wrap_Base58_Decode_cryptosdk_8fd4b13a305ceb16(_gostring_ _swig_go_0) {
  std::string *arg1 = 0 ;
  SwigValueWrapper< std::vector< uint8_t > > result;
  std::vector< uint8_t > *_swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  result = Orbs::Base58::Decode((std::string const &)*arg1);
  *(std::vector< uint8_t > **)&_swig_go_result = new std::vector< uint8_t >(result); 
  return _swig_go_result;
}


Orbs::Base58 *_wrap_new_Base58_cryptosdk_8fd4b13a305ceb16() {
  Orbs::Base58 *result = 0 ;
  Orbs::Base58 *_swig_go_result;
  
  
  result = (Orbs::Base58 *)new Orbs::Base58();
  *(Orbs::Base58 **)&_swig_go_result = (Orbs::Base58 *)result; 
  return _swig_go_result;
}


void _wrap_delete_Base58_cryptosdk_8fd4b13a305ceb16(Orbs::Base58 *_swig_go_0) {
  Orbs::Base58 *arg1 = (Orbs::Base58 *) 0 ;
  
  arg1 = *(Orbs::Base58 **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_CRC32_Hash__SWIG_0_cryptosdk_8fd4b13a305ceb16(std::vector< uint8_t > *_swig_go_0, std::vector< uint8_t > *_swig_go_1) {
  std::vector< uint8_t > *arg1 = 0 ;
  std::vector< uint8_t > *arg2 = 0 ;
  
  arg1 = *(std::vector< uint8_t > **)&_swig_go_0; 
  arg2 = *(std::vector< uint8_t > **)&_swig_go_1; 
  
  Orbs::CRC32::Hash((std::vector< uint8_t > const &)*arg1,*arg2);
  
}


void _wrap_CRC32_Hash__SWIG_1_cryptosdk_8fd4b13a305ceb16(std::vector< uint8_t > *_swig_go_0, std::string *_swig_go_1) {
  std::vector< uint8_t > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(std::vector< uint8_t > **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  
  Orbs::CRC32::Hash((std::vector< uint8_t > const &)*arg1,*arg2);
  
}


void _wrap_CRC32_Hash__SWIG_2_cryptosdk_8fd4b13a305ceb16(_gostring_ _swig_go_0, std::vector< uint8_t > *_swig_go_1) {
  std::string *arg1 = 0 ;
  std::vector< uint8_t > *arg2 = 0 ;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  arg2 = *(std::vector< uint8_t > **)&_swig_go_1; 
  
  Orbs::CRC32::Hash((std::string const &)*arg1,*arg2);
  
}


void _wrap_CRC32_Hash__SWIG_3_cryptosdk_8fd4b13a305ceb16(_gostring_ _swig_go_0, std::string *_swig_go_1) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  arg2 = *(std::string **)&_swig_go_1; 
  
  Orbs::CRC32::Hash((std::string const &)*arg1,*arg2);
  
}


Orbs::CRC32 *_wrap_new_CRC32_cryptosdk_8fd4b13a305ceb16() {
  Orbs::CRC32 *result = 0 ;
  Orbs::CRC32 *_swig_go_result;
  
  
  result = (Orbs::CRC32 *)new Orbs::CRC32();
  *(Orbs::CRC32 **)&_swig_go_result = (Orbs::CRC32 *)result; 
  return _swig_go_result;
}


void _wrap_delete_CRC32_cryptosdk_8fd4b13a305ceb16(Orbs::CRC32 *_swig_go_0) {
  Orbs::CRC32 *arg1 = (Orbs::CRC32 *) 0 ;
  
  arg1 = *(Orbs::CRC32 **)&_swig_go_0; 
  
  delete arg1;
  
}


uint8_t *_wrap_Address_MAIN_NETWORK_ID_get_cryptosdk_8fd4b13a305ceb16() {
  uint8_t result;
  uint8_t *_swig_go_result;
  
  
  result = (uint8_t)Orbs::Address::MAIN_NETWORK_ID;
  *(uint8_t **)&_swig_go_result = new uint8_t(result); 
  return _swig_go_result;
}


uint8_t *_wrap_Address_TEST_NETWORK_ID_get_cryptosdk_8fd4b13a305ceb16() {
  uint8_t result;
  uint8_t *_swig_go_result;
  
  
  result = (uint8_t)Orbs::Address::TEST_NETWORK_ID;
  *(uint8_t **)&_swig_go_result = new uint8_t(result); 
  return _swig_go_result;
}


uint8_t *_wrap_Address_VERSION_get_cryptosdk_8fd4b13a305ceb16() {
  uint8_t result;
  uint8_t *_swig_go_result;
  
  
  result = (uint8_t)Orbs::Address::VERSION;
  *(uint8_t **)&_swig_go_result = new uint8_t(result); 
  return _swig_go_result;
}


uint32_t *_wrap_Address_PUBLIC_KEY_SIZE_get_cryptosdk_8fd4b13a305ceb16() {
  uint32_t result;
  uint32_t *_swig_go_result;
  
  
  result = (uint32_t)Orbs::Address::PUBLIC_KEY_SIZE;
  *(uint32_t **)&_swig_go_result = new uint32_t(result); 
  return _swig_go_result;
}


uint32_t *_wrap_Address_NETWORK_ID_SIZE_get_cryptosdk_8fd4b13a305ceb16() {
  uint32_t result;
  uint32_t *_swig_go_result;
  
  
  result = (uint32_t)Orbs::Address::NETWORK_ID_SIZE;
  *(uint32_t **)&_swig_go_result = new uint32_t(result); 
  return _swig_go_result;
}


uint32_t *_wrap_Address_VERSION_SIZE_get_cryptosdk_8fd4b13a305ceb16() {
  uint32_t result;
  uint32_t *_swig_go_result;
  
  
  result = (uint32_t)Orbs::Address::VERSION_SIZE;
  *(uint32_t **)&_swig_go_result = new uint32_t(result); 
  return _swig_go_result;
}


uint32_t *_wrap_Address_VIRTUAL_CHAIN_ID_SIZE_get_cryptosdk_8fd4b13a305ceb16() {
  uint32_t result;
  uint32_t *_swig_go_result;
  
  
  result = (uint32_t)Orbs::Address::VIRTUAL_CHAIN_ID_SIZE;
  *(uint32_t **)&_swig_go_result = new uint32_t(result); 
  return _swig_go_result;
}


uint8_t *_wrap_Address_VIRTUAL_CHAIN_ID_MSB_get_cryptosdk_8fd4b13a305ceb16() {
  uint8_t result;
  uint8_t *_swig_go_result;
  
  
  result = (uint8_t)Orbs::Address::VIRTUAL_CHAIN_ID_MSB;
  *(uint8_t **)&_swig_go_result = new uint8_t(result); 
  return _swig_go_result;
}


uint32_t *_wrap_Address_ACCOUNT_ID_SIZE_get_cryptosdk_8fd4b13a305ceb16() {
  uint32_t result;
  uint32_t *_swig_go_result;
  
  
  result = (uint32_t)Orbs::Address::ACCOUNT_ID_SIZE;
  *(uint32_t **)&_swig_go_result = new uint32_t(result); 
  return _swig_go_result;
}


uint32_t *_wrap_Address_CHECKSUM_SIZE_get_cryptosdk_8fd4b13a305ceb16() {
  uint32_t result;
  uint32_t *_swig_go_result;
  
  
  result = (uint32_t)Orbs::Address::CHECKSUM_SIZE;
  *(uint32_t **)&_swig_go_result = new uint32_t(result); 
  return _swig_go_result;
}


uint32_t *_wrap_Address_ADDRESS_LENGTH_get_cryptosdk_8fd4b13a305ceb16() {
  uint32_t result;
  uint32_t *_swig_go_result;
  
  
  result = (uint32_t)Orbs::Address::ADDRESS_LENGTH;
  *(uint32_t **)&_swig_go_result = new uint32_t(result); 
  return _swig_go_result;
}


Orbs::Address *_wrap_new_Address__SWIG_0_cryptosdk_8fd4b13a305ceb16(std::vector< uint8_t > *_swig_go_0, std::vector< uint8_t > *_swig_go_1, uint8_t *_swig_go_2) {
  std::vector< uint8_t > *arg1 = 0 ;
  std::vector< uint8_t > *arg2 = 0 ;
  uint8_t arg3 ;
  uint8_t *argp3 ;
  Orbs::Address *result = 0 ;
  Orbs::Address *_swig_go_result;
  
  arg1 = *(std::vector< uint8_t > **)&_swig_go_0; 
  arg2 = *(std::vector< uint8_t > **)&_swig_go_1; 
  
  argp3 = (uint8_t *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null uint8_t");
  }
  arg3 = (uint8_t)*argp3;
  
  
  result = (Orbs::Address *)new Orbs::Address((std::vector< uint8_t > const &)*arg1,(std::vector< uint8_t > const &)*arg2,arg3);
  *(Orbs::Address **)&_swig_go_result = (Orbs::Address *)result; 
  return _swig_go_result;
}


Orbs::Address *_wrap_new_Address__SWIG_1_cryptosdk_8fd4b13a305ceb16(_gostring_ _swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Orbs::Address *result = 0 ;
  Orbs::Address *_swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  result = (Orbs::Address *)new Orbs::Address((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  *(Orbs::Address **)&_swig_go_result = (Orbs::Address *)result; 
  return _swig_go_result;
}


Orbs::Address *_wrap_new_Address__SWIG_2_cryptosdk_8fd4b13a305ceb16(Orbs::ED25519Key *_swig_go_0, std::vector< uint8_t > *_swig_go_1, uint8_t *_swig_go_2) {
  Orbs::ED25519Key *arg1 = 0 ;
  std::vector< uint8_t > *arg2 = 0 ;
  uint8_t arg3 ;
  uint8_t *argp3 ;
  Orbs::Address *result = 0 ;
  Orbs::Address *_swig_go_result;
  
  arg1 = *(Orbs::ED25519Key **)&_swig_go_0; 
  arg2 = *(std::vector< uint8_t > **)&_swig_go_1; 
  
  argp3 = (uint8_t *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null uint8_t");
  }
  arg3 = (uint8_t)*argp3;
  
  
  result = (Orbs::Address *)new Orbs::Address((Orbs::ED25519Key const &)*arg1,(std::vector< uint8_t > const &)*arg2,arg3);
  *(Orbs::Address **)&_swig_go_result = (Orbs::Address *)result; 
  return _swig_go_result;
}


void _wrap_delete_Address_cryptosdk_8fd4b13a305ceb16(Orbs::Address *_swig_go_0) {
  Orbs::Address *arg1 = (Orbs::Address *) 0 ;
  
  arg1 = *(Orbs::Address **)&_swig_go_0; 
  
  delete arg1;
  
}


std::vector< uint8_t > *_wrap_Address_GetPublicKey_cryptosdk_8fd4b13a305ceb16(Orbs::Address *_swig_go_0) {
  Orbs::Address *arg1 = (Orbs::Address *) 0 ;
  std::vector< uint8_t > *result = 0 ;
  std::vector< uint8_t > *_swig_go_result;
  
  arg1 = *(Orbs::Address **)&_swig_go_0; 
  
  result = (std::vector< uint8_t > *) &((Orbs::Address const *)arg1)->GetPublicKey();
  *(std::vector< uint8_t > **)&_swig_go_result = result; 
  return _swig_go_result;
}


uint8_t *_wrap_Address_GetNetworkId_cryptosdk_8fd4b13a305ceb16(Orbs::Address *_swig_go_0) {
  Orbs::Address *arg1 = (Orbs::Address *) 0 ;
  uint8_t result;
  uint8_t *_swig_go_result;
  
  arg1 = *(Orbs::Address **)&_swig_go_0; 
  
  result = ((Orbs::Address const *)arg1)->GetNetworkId();
  *(uint8_t **)&_swig_go_result = new uint8_t(result); 
  return _swig_go_result;
}


uint8_t *_wrap_Address_GetVersion_cryptosdk_8fd4b13a305ceb16(Orbs::Address *_swig_go_0) {
  Orbs::Address *arg1 = (Orbs::Address *) 0 ;
  uint8_t result;
  uint8_t *_swig_go_result;
  
  arg1 = *(Orbs::Address **)&_swig_go_0; 
  
  result = ((Orbs::Address const *)arg1)->GetVersion();
  *(uint8_t **)&_swig_go_result = new uint8_t(result); 
  return _swig_go_result;
}


std::vector< uint8_t > *_wrap_Address_GetVirtualChainId_cryptosdk_8fd4b13a305ceb16(Orbs::Address *_swig_go_0) {
  Orbs::Address *arg1 = (Orbs::Address *) 0 ;
  std::vector< uint8_t > *result = 0 ;
  std::vector< uint8_t > *_swig_go_result;
  
  arg1 = *(Orbs::Address **)&_swig_go_0; 
  
  result = (std::vector< uint8_t > *) &((Orbs::Address const *)arg1)->GetVirtualChainId();
  *(std::vector< uint8_t > **)&_swig_go_result = result; 
  return _swig_go_result;
}


std::vector< uint8_t > *_wrap_Address_GetAccountId_cryptosdk_8fd4b13a305ceb16(Orbs::Address *_swig_go_0) {
  Orbs::Address *arg1 = (Orbs::Address *) 0 ;
  std::vector< uint8_t > *result = 0 ;
  std::vector< uint8_t > *_swig_go_result;
  
  arg1 = *(Orbs::Address **)&_swig_go_0; 
  
  result = (std::vector< uint8_t > *) &((Orbs::Address const *)arg1)->GetAccountId();
  *(std::vector< uint8_t > **)&_swig_go_result = result; 
  return _swig_go_result;
}


std::vector< uint8_t > *_wrap_Address_GetChecksum_cryptosdk_8fd4b13a305ceb16(Orbs::Address *_swig_go_0) {
  Orbs::Address *arg1 = (Orbs::Address *) 0 ;
  std::vector< uint8_t > *result = 0 ;
  std::vector< uint8_t > *_swig_go_result;
  
  arg1 = *(Orbs::Address **)&_swig_go_0; 
  
  result = (std::vector< uint8_t > *) &((Orbs::Address const *)arg1)->GetChecksum();
  *(std::vector< uint8_t > **)&_swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_Address_ToString_cryptosdk_8fd4b13a305ceb16(Orbs::Address *_swig_go_0) {
  Orbs::Address *arg1 = (Orbs::Address *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(Orbs::Address **)&_swig_go_0; 
  
  result = ((Orbs::Address const *)arg1)->ToString();
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


bool _wrap_Address_IsValidNetworkId_cryptosdk_8fd4b13a305ceb16(uint8_t *_swig_go_0) {
  uint8_t arg1 ;
  uint8_t *argp1 ;
  bool result;
  bool _swig_go_result;
  
  
  argp1 = (uint8_t *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null uint8_t");
  }
  arg1 = (uint8_t)*argp1;
  
  
  result = (bool)Orbs::Address::IsValidNetworkId(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Address_IsValidVersion_cryptosdk_8fd4b13a305ceb16(uint8_t *_swig_go_0) {
  uint8_t arg1 ;
  uint8_t *argp1 ;
  bool result;
  bool _swig_go_result;
  
  
  argp1 = (uint8_t *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null uint8_t");
  }
  arg1 = (uint8_t)*argp1;
  
  
  result = (bool)Orbs::Address::IsValidVersion(arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Address_IsValidVirtualChainId_cryptosdk_8fd4b13a305ceb16(std::vector< uint8_t > *_swig_go_0) {
  std::vector< uint8_t > *arg1 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< uint8_t > **)&_swig_go_0; 
  
  result = (bool)Orbs::Address::IsValidVirtualChainId((std::vector< uint8_t > const &)*arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Address_IsValid_cryptosdk_8fd4b13a305ceb16(_gostring_ _swig_go_0) {
  std::string *arg1 = 0 ;
  bool result;
  bool _swig_go_result;
  
  
  std::string arg1_str(_swig_go_0.p, _swig_go_0.n);
  arg1 = &arg1_str;
  
  
  result = (bool)Orbs::Address::IsValid((std::string const &)*arg1);
  _swig_go_result = result; 
  return _swig_go_result;
}


#ifdef __cplusplus
}
#endif

